// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  transactions  Transaction[]
  
  @@map("users")
}

model Book {
  id            Int       @id @default(autoincrement())
  title         String    @unique
  author        String
  description   String?
  price         Float
  stock         Int       @default(0)
  genreId       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  genre         Genre       @relation(fields: [genreId], references: [id], onDelete: Restrict)
  transactions  TransactionItem[]
  
  @@map("books")
}

model Genre {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  books       Book[]
  
  @@map("genres")
}

model Transaction {
  id        Int                 @id @default(autoincrement())
  userId    Int
  total     Float
  createdAt DateTime            @default(now())
  
  user      User                @relation(fields: [userId], references: [id])
  items     TransactionItem[]
  
  @@map("transactions")
}

model TransactionItem {
  id             Int         @id @default(autoincrement())
  transactionId  Int
  bookId         Int
  quantity       Int
  price          Float
  
  transaction    Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  book           Book        @relation(fields: [bookId], references: [id])
  
  @@map("transaction_items")
}

enum UserRole {
  ADMIN
  CUSTOMER
}
